library(Seurat)
humanskin=Read10X('./humanskin/')
ND=Read10X('./ND/')
TD=Read10X('./TD/')
humanskin=CreateSeuratObject(humanskin,project = 'humanskin')
humanscar=CreateSeuratObject(humanscar,project = 'humanscar')
ND=CreateSeuratObject(ND,project = 'ND')
TD=CreateSeuratObject(TD,project = 'TD')
scRNA<-merge(humanskin,y=c(humanskin, ND,TD))
scRNA@meta.data$tissue_type=scRNA@meta.data$orig.ident
scRNA@meta.data$tissue_type=stringr::str_remove(scRNA@meta.data$tissue_type,'[0-9]')
scRNA[["percent.mt"]] <- PercentageFeatureSet(scRNA, pattern = "^MT-")
HB.genes <- c("HBA1","HBA2","HBB","HBD","HBE1","HBG1","HBG2","HBM","HBQ1","HBZ")
HB_m <- match(HB.genes, rownames(scRNA@assays$RNA)) 
HB.genes <- rownames(scRNA@assays$RNA)[HB_m] 
HB.genes <- HB.genes[!is.na(HB.genes)] 
scRNA[["percent.HB"]]<-PercentageFeatureSet(scRNA, features=HB.genes) 
library(ggplot2)
col.num <- length(levels(scRNA@active.ident))
VlnPlot(scRNA,features=c("nFeature_RNA","nCount_RNA","percent.mt","percent.HB"),cols=rainbow(col.num), pt.size=0.01,ncol=4)+theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank()) 
print(c(minGene=200, maxGene=6500, pctMT=15))
scRNA <- subset(scRNA, subset = nFeature_RNA > minGene & nFeature_RNA < maxGene & percent.mt < pctMT)
col.num <- length(levels(scRNA@active.ident))
VlnPlot(scRNA,features=c("nFeature_RNA","nCount_RNA","percent.mt","percent.HB"),cols=rainbow(col.num), pt.size=0.1,ncol=4)+theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank()) 
scRNA <- NormalizeData(scRNA, normalization.method = "LogNormalize", scale.factor = 10000)
library(tidyverse)
library(patchwork)
scRNA<- FindVariableFeatures(scRNA, selection.method = "vst", nfeatures = 2000)
scale.genes <-  VariableFeatures(scRNA)
scRNA <- ScaleData(scRNA, features = scale.genes)
scRNA<- RunPCA(scRNA, features = VariableFeatures(scRNA))
DimPlot(scRNA, reduction = "pca", group.by = "orig.ident")
library(harmony)
scRNA_harmony <- RunHarmony(scRNA, group.by.vars = "orig.ident")
DimPlot(scRNA_harmony, reduction = "harmony", group.by = "orig.ident")
ElbowPlot(scRNA_harmony,reduction = 'harmony')
scRNA <- FindNeighbors(scRNA_harmony, dims = 1:10, reduction = "harmony")
scRNA <- FindClusters(scRNA)
scRNA <- RunUMAP(scRNA, dims = 1:10,reduction = 'harmony')
DimPlot(scRNA,split.by = 'tissue_type')
library(celldex)
refdata <- celldex::HumanPrimaryCellAtlasData()
library(SingleR)
scRNA <- JoinLayers(scRNA)
testdata <- GetAssayData(scRNA, slot="data")
clusters <- scRNA@meta.data$seurat_clusters
cellpred <- SingleR(test = testdata, ref = refdata, labels =refdata$label.main, method = "cluster", clusters = clusters, assay.type.test = "logcounts", assay.type.ref = "logcounts")
celltype = data.frame(ClusterID=rownames(cellpred), celltype=cellpred$labels, stringsAsFactors = F)
scRNA@meta.data$celltype = "NA"
for(I in 1:nrow(celltype)){scRNA@meta.data[which(scRNA@meta.data$seurat_clusters==celltype$ClusterID[i]),'celltype'] <- celltype$celltype[i]}
Idents(scRNA)=scRNA$celltype
library(RColorBrewer)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))) 
DimPlot(scRNA,split.by = 'tissue_type',cols = col_vector[20:40])
unique(Idents(scRNA))
saveRDS(scRNA,file = 'scRNA_anno.RDS')
scRNA_T=subset(scRNA,celltype=='T_cells')
scRNAsub<- FindVariableFeatures(scRNA_T, selection.method = "vst", nfeatures = 2000)
scale.genes <-  VariableFeatures(scRNAsub)
scRNAsub <- ScaleData(scRNAsub, features = scale.genes)
scRNAsub<- RunPCA(scRNAsub, features = VariableFeatures(scRNAsub))
DimPlot(scRNAsub, reduction = "pca", group.by = "orig.ident")
ElbowPlot(scRNAsub)
set.seed(1000)
scRNAsub <- RunHarmony(scRNAsub, group.by.vars = "orig.ident")
DimPlot(scRNAsub, reduction = "harmony", group.by = "orig.ident")
ElbowPlot(scRNAsub,reduction = 'harmony')
scRNAsub <- FindNeighbors(scRNAsub, reduction = 'harmony',dims = 1:10)
scRNAsub <- FindClusters(scRNAsub)
scRNAsub <- RunUMAP(scRNAsub, reduction = 'harmony',dims = 1:10)
DimPlot(scRNAsub, label=TRUE,split.by = 'tissue_type') 
library(reshape2)
library(ggplot2)
prop_df <- table(scRNAsub@meta.data$seurat_clusters,scRNAsub@meta.data$tissue_type) %>% melt()
colnames(prop_df) <- c("Cluster","Sample","Number")
prop_df$Cluster <- factor(prop_df$Cluster)
library(RColorBrewer)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))) 
sample_color <- col_vector[1:10] 
prop <- ggplot(data = prop_df, aes(x =Number, y = Sample, fill =  Cluster)) +  geom_bar(stat = "identity", width=0.8,position="fill")+  scale_fill_manual(values=col_vector[1:20]) +  theme_bw()+  theme(panel.grid =element_blank()) +  labs(x="",y="Ratio")+  theme(axis.text.y = element_text(size=12, colour = "black"))+  theme(axis.text.x = element_text(size=12, colour = "black"))+  theme( axis.text.x.bottom = element_text(hjust = 1, vjust = 1, angle = 45)) 
prop
Idents(scRNAsub)=scRNAsub$seurat_clusters
T_marker <-c("CCR7","LEF1", "TCF7",'SELL','KLF2', "ANXA1", "CXCR4", "IL2","BCL6", "CXCR5","ICA1",  'IL23R',"CCR6",'CAPG','RORC','IL17A','FOXP3','IL2RA','IL1R2','CD8A','GZMK','GZMA','CCL5','HAVCR2','PDCD1','LAG3', 'EPCAM','CD19','CD3E') 
DotPlot(scRNAsub,features = T_marker, group.by = "seurat_clusters") + coord_flip()
T_celltype=c('CD4_Naive','CD8_CM','CD8_EM','CD4_Naive','Th17','CD4_Naive','CD4_CM','CD4_Naive','CD8_EM','CD4_REG','CD8_Naive','CD8_Exhau','CD8_Exhau')
Idents(scRNAsub) <- scRNAsub@meta.data$seurat_clusters
names(T_celltype) <- levels(scRNAsub)
scRNAsub<- RenameIdents(scRNAsub, T_celltype)
scRNAsub@meta.data$T_celltype <- Idents(scRNAsub)
Idents(scRNAsub)=scRNAsub@meta.data$T_celltype
colors=c('#313c63','#b42e20','#ebc03e','#377b4c', '#7bc7cd','#5d84a4','#bc3c29')
DimPlot(scRNAsub, group.by="T_celltype", label=T, label.size=5,cols = col_vector[30:50], pt.size = 1,split.by = 'tissue_type')
prop_df <- table(scRNAsub@meta.data$T_celltype,scRNAsub@meta.data$tissue_type) %>% melt()
colnames(prop_df) <- c("Cluster","Sample","Number")
prop_df$Cluster <- factor(prop_df$Cluster)
library(RColorBrewer)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))) 
sample_color <- col_vector[1:10] 
prop <- ggplot(data = prop_df, aes(x =Number, y = Sample, fill =  Cluster)) +  geom_bar(stat = "identity", width=0.8,position="fill")+  scale_fill_manual(values=col_vector[1:20]) +  theme_bw()+  theme(panel.grid =element_blank()) +  labs(x="",y="Ratio")+  theme(axis.text.y = element_text(size=12, colour = "black"))+
  theme(axis.text.x=element_text(size=12, colour="black"))+ theme(axis.text.x.bottom = element_text(hjust = 1, vjust = 1, angle = 45) ) 
prop
saveRDS(scRNAsub,file = 'scRNA_T.RDS')
scRNA_T=readRDS('./scRNA_T.RDS')
library(slingshot)
library(RColorBrewer)
library(SingleCellExperiment)
table(scRNA_T$T_celltype)
cellinfo <- scRNA_T@meta.data
sce <- as.SingleCellExperiment(scRNA_T)
sce_slingshot<-slingshot(sce,clusterLabels='T_celltype',reducedDim='UMAP', start.clus = c(3,5), shrink = 0.2)
cl1 <- cellinfo$T_celltype
plot(reducedDims(sce_slingshot)$UMAP,col = brewer.pal(12,"Paired")[cl1],pch=16,asp=1)
igraph::igraph.options(sparsematrices = FALSE)
lines(SlingshotDataSet(sce_slingshot), lwd=2, type = 'lineages', col = 'black')
legend("right",legend = unique(sce$T_celltype), col = unique(brewer.pal(12,"Paired")[cl1]),inset=c(0.1,2,4), pch = 16)
scRNA=readRDS('./scRNA_anno.RDS')
scRNA_other=subset(scRNA,celltype != 'T_cells')
scRNA_other$T_celltype =scRNA_other$celltype
scRNA_chat=merge(scRNA_other,scRNA_T)
scRNA_chat_TD=subset(scRNA_chat,tissue_type=='TD')
set.seed(123)
a=sample(1:ncol(scRNA_chat_TD),2000)
scRNA_chat_TD=scRNA_chat_TD[,a]
meta =scRNA_chat_TD@meta.data
scRNA_chat_TD <- JoinLayers(scRNA_chat_TD)
data_input <- as.matrix(GetAssayData(scRNA_chat_TD, assay = "RNA", layer = "data"))
identical(colnames(data_input),rownames(meta))
library(CellChat)
cellchat <- createCellChat(object = data_input, meta = meta, group.by = "T_celltype")
CellChatDB <- CellChatDB.human 
groupSize <- as.numeric(table(cellchat@idents))
CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling") 
cellchat@DB <- CellChatDB.use 
dplyr::glimpse(CellChatDB$interaction)
cellchat <- subsetData(cellchat)
cellchat <- identifyOverExpressedGenes(cellchat, do.fast = FALSE)
cellchat <- identifyOverExpressedInteractions(cellchat)
cellchat <- computeCommunProb(cellchat)
cellchat <- computeCommunProbPathway(cellchat)
cellchat <- aggregateNet(cellchat)
cellchat <- computeNetSimilarity(cellchat, type = "functional")
cellchat <- filterCommunication(cellchat, min.cells = 10)
cellchat <- computeCommunProbPathway(cellchat)
df.net<- subsetCommunication(cellchat)
cellchat <- aggregateNet(cellchat)
groupSize <- as.numeric(table(cellchat@idents))
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= T, sources.use = 'CD4_Naive', title.name = "Number of interactions")
p_bubble=netVisual_bubble(cellchat,sources.use='CD4_Naive', remove.isolate = FALSE)+coord_flip()
p_bubble
scRNA_chat_HS=subset(scRNA_chat,tissue_type=='humanscar')
set.seed(123)
a=sample(1:ncol(scRNA_chat_HS),2000)
scRNA_chat_HS=scRNA_chat_HS[,a]
meta =scRNA_chat_HS@meta.data 
scRNA_chat_HS <- JoinLayers(scRNA_chat_HS)
data_input <- as.matrix(GetAssayData(scRNA_chat_HS, assay = "RNA", layer = "data"))
identical(colnames(data_input),rownames(meta))
library(CellChat)
cellchat <- createCellChat(object = data_input, meta = meta, group.by = "T_celltype")
CellChatDB <- CellChatDB.human 
groupSize <- as.numeric(table(cellchat@idents))
CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling") 
cellchat@DB <- CellChatDB.use 
dplyr::glimpse(CellChatDB$interaction)
cellchat <- subsetData(cellchat)
cellchat <- identifyOverExpressedGenes(cellchat, do.fast = FALSE)
cellchat <- identifyOverExpressedInteractions(cellchat)
cellchat <- computeCommunProb(cellchat)
cellchat <- computeCommunProbPathway(cellchat)
cellchat <- aggregateNet(cellchat)
cellchat <- computeNetSimilarity(cellchat, type = "functional")
cellchat <- filterCommunication(cellchat, min.cells = 10)
cellchat <- computeCommunProbPathway(cellchat)
df.net<- subsetCommunication(cellchat)
cellchat <- aggregateNet(cellchat)
groupSize <- as.numeric(table(cellchat@idents))
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= T, sources.use = 'CD4_Naive', title.name = "Number of interactions")
pp_bubble= netVisual_bubble(cellchat, sources.use = 'CD4_Naive', remove.isolate = FALSE)+coord_flip()
pp_bubble
table1 <- read.csv("table1.csv", header = TRUE, stringsAsFactors = FALSE)
gene=unique(table1$Gene)
DotPlot(scRNA,features = gene,cols = c('#dadada','#bc3c29'))
scRNA_T=readRDS('./scRNA_T.RDS')
FeaturePlot(scRNA_T,features = 'APOBEC3G',label = T,pt.size = 0.5,order = T,cols = c('#dadada','#bc3c29'))
FeaturePlot(scRNA_T,features = 'YWHAQ',label = T,pt.size = 0.5,order = T,cols = c('#dadada','#bc3c29'))
library(mixtools)
library(GeneSwitches)
library(SingleCellExperiment)
scRNA_cm=subset(scRNA_T,T_celltype=='CD4_Naive')
cellinfo <- scRNA_cm@meta.data
sce <- as.SingleCellExperiment(scRNA_cm)
library(slingshot)
library(RColorBrewer)
library(SingleCellExperiment)
sce_slingshot <- slingshot(sce , clusterLabels = 'T_celltype', reducedDim = 'UMAP', start.clus = c(3,5), shrink = 0.2)
cl1 <- cellinfo$T_celltype
plot(reducedDims(sce_slingshot)$UMAP,col = brewer.pal(12,"Paired")[cl1],pch=16,asp=1)
igraph::igraph.options(sparsematrices = FALSE)
lines(SlingshotDataSet(sce_slingshot), lwd=2, type = 'lineages', col = 'black')
legend("right",legend = unique(sce$T_celltype), col = unique(brewer.pal(12,"Paired")[cl1]),inset=c(3,2,4), pch = 16)
allexpdata <- as.matrix(GetAssayData(scRNA_cm, assay = "RNA", layer = "data"))
allcells<-colData(sce_slingshot);dim(allcells)
allcells$slingPseudotime_1
cells <- allcells[!is.na(allcells$slingPseudotime_1),];dim(cells)
expdata <- allexpdata[,rownames(cells)];dim(expdata)
expdata <- expdata[apply(expdata > 0,1,sum) >= 5,];dim(expdata)
rd_UMAP <- Embeddings(object = scRNA_cm, reduction = "umap");dim(rd_UMAP)
rd_UMAP <- rd_UMAP[rownames(cells), ];dim(rd_UMAP)
all(rownames(rd_UMAP) == colnames(expdata))
library(mixtools)
sce <- SingleCellExperiment(assays = List(expdata = expdata))
colData(sce)$Pseudotime <- cells$slingPseudotime_1
reducedDims(sce) <- SimpleList(UMAP = rd_UMAP)
sce_p1 <- sce
h <- hist(assays(sce_p1)$expdata, breaks = 200, plot = FALSE)
{plot(h, freq = FALSE, xlim = c(0,2), ylim = c(0,1), main ="Histogram of gene expression",xlab = "Gene expression", col = "darkgoldenrod2", border = "grey")abline(v=0.2, col="blue")}
sce_p1 <- binarize_exp(sce_p1, fix_cutoff = TRUE, binarize_cutoff = 0.2)
sce_p1 <- find_switch_logistic_fastglm(sce_p1, downsample = TRUE, show_warning = FALSE, zero_ratio = 0.65, ds_cutoff = 0.65)
table(rowData(sce_p1)$prd_quality)
sg_allgenes <- filter_switchgenes(sce_p1, allgenes = TRUE, r2cutoff = 0.01, topnum = 25, zero_pct = 0.92);dim(sg_allgenes)
sg_gtypes <- filter_switchgenes(sce_p1, allgenes = FALSE, r2cutoff = 0.01, topnum = 25, zero_pct = 0.92, genelists = gs_genelists);dim(sg_gtypes)
sg_vis <- rbind(sg_gtypes, sg_allgenes[setdiff(rownames(sg_allgenes), rownames(sg_gtypes)),]);dim(sg_vis)
gl <- unique(table1$Gene)
intersect(sg_vis$geneID, gl)
sg_my <- rowData(sce_p1)[gl,];head(sg_my)
sg_my$feature_type <- "Mendelian genes"
sg_vis <- rbind(sg_vis, sg_my)
plot_timeline_ggplot(sg_vis, timedata = sce_p1$Pseudotime, txtsize = 3.5)
a=sce_p1@assays@data$expdata['APOBEC3G',] 
b=sce_p1$Pseudotime
df=data.frame(gene=a,time=b)
ggstatsplot::ggscatterstats(data=df,x='time',y='gene')
scRNA_other=subset(scRNA,celltype != 'T_cells')
scRNA_CM=subset(scRNA_T,T_celltype=='CD4_Naive')
scRNA_CM$gene_group <- ifelse(GetAssayData(scRNA_CM, assay = "RNA", layer = "counts")["GPR35", ] > 0, "GPR35+CD4_Naive","GPR35-CD4_Naive")
scRNA_otherT=subset(scRNA_T,T_celltype != 'CD4_Naive')
scRNA_other$gene_group =scRNA_other$celltype
scRNA_otherT$gene_group=scRNA_otherT$T_celltype
scRNA_chat=merge(scRNA_CM,c(scRNA_other,scRNA_otherT))
scRNA_chat_HS=subset(scRNA_chat,tissue_type=='humanscar')
set.seed(123)
a=sample(1:ncol(scRNA_chat_HS),2000)
scRNA_chat_HS=scRNA_chat_HS[,a]
meta =scRNA_chat_HS@meta.data 
scRNA_chat_HS <- JoinLayers(scRNA_chat_HS, assay = "RNA")
data_input <- as.matrix(GetAssayData(scRNA_chat_HS, assay = "RNA", layer = "data"))
identical(colnames(data_input),rownames(meta))
cellchat <- createCellChat(object = data_input, meta = meta, group.by = "gene_group")
CellChatDB <- CellChatDB.human 
groupSize <- as.numeric(table(cellchat@idents))
CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling") 
cellchat@DB <- CellChatDB.use 
dplyr::glimpse(CellChatDB$interaction)
cellchat <- subsetData(cellchat)
cellchat <- identifyOverExpressedGenes(cellchat, do.fast = FALSE)
cellchat <- identifyOverExpressedInteractions(cellchat)
cellchat <- computeCommunProb(cellchat)
cellchat <- computeCommunProbPathway(cellchat)
cellchat <- aggregateNet(cellchat)
cellchat <- computeNetSimilarity(cellchat, type = "functional")
cellchat <- filterCommunication(cellchat, min.cells = 10)
cellchat <- computeCommunProbPathway(cellchat)
df.net<- subsetCommunication(cellchat)
cellchat <- aggregateNet(cellchat)
groupSize <- as.numeric(table(cellchat@idents))
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= T, sources.use = c('GPR35+CD4_Naive','GPR35-CD4_Naive'), title.name = "Number of interactions")
p_bubble=netVisual_bubble(cellchat,sources.use=c('GPR35+CD4_Naive','GPR35-CD4_Naive'),remove.isolate = FALSE)+coord_flip()
p_bubble
scRNA_CM=subset(scRNA_T,T_celltype=='CD4_Naive')
scRNA_CM$gene_group <- ifelse(GetAssayData(scRNA_CM, assay = "RNA", layer = "counts")["GPR35", ] > 0, "GPR35+CD4_Naive", "GPR35-CD4_Naive")
scRNA_otherT=subset(scRNA_T,T_celltype != 'CD4_Naive')
scRNA_otherT$gene_group=scRNA_otherT$T_celltype
scRNA_metab=merge(scRNA_CM,c(scRNA_otherT))
scRNA_metab_HS=subset(scRNA_metab,tissue_type=='humanscar')
set.seed(123)
a=sample(1:ncol(scRNA_metab_HS),1384)
scRNA_metab_HS=scRNA_metab_HS[,a]
